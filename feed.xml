<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://idiot2222.github.io/</id><title>Bogeun</title><subtitle>Bogeun's blog for studying development. c java spring jpa computer science architecture network database operating system</subtitle> <updated>2024-01-14T18:12:07+09:00</updated> <author> <name>idiot2222</name> <uri>https://idiot2222.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://idiot2222.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://idiot2222.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2024 idiot2222 </rights> <icon>//assets/img/favicons/favicon.ico</icon> <logo>//assets/img/favicons/favicon-96x96.png</logo> <entry><title>기강 자바-04</title><link href="https://idiot2222.github.io/posts/%EA%B8%B0%EA%B0%95_%EC%9E%90%EB%B0%94-04/" rel="alternate" type="text/html" title="기강 자바-04" /><published>2024-01-07T16:23:00+09:00</published> <updated>2024-01-07T16:23:00+09:00</updated> <id>https://idiot2222.github.io/posts/%EA%B8%B0%EA%B0%95_%EC%9E%90%EB%B0%94-04/</id> <content src="https://idiot2222.github.io/posts/%EA%B8%B0%EA%B0%95_%EC%9E%90%EB%B0%94-04/" /> <author> <name>idiot2222</name> </author> <category term="기본기 강화 스터디 - Java" /> <category term="기강_자바-04" /> <summary> 객체지향 프로그래밍 이번에는 자바에서 지원하는 객체지향 프로그래밍 문법에 대해 알아본다. 상속 자바의 상속이란, 부모 클래스로부터 멤버 변수나 메서드 등의 성질을 물려받는 행위이다. 자식 클래스는 부모 클래스의 기능을 그대려 물려받는 것은 물론, 확장 및 수정도 가능하다. 자바의 상속 자바는 단일 상속을 지원한다. 자식 클래스는 하나의 부모 클래스만 상속 받을 수 있다. 어떤 부모 클래스로부터 상속을 받은 자식 클래스 역시 다른 클래스에 상속을 해줄 수 있다. 부모 클래스는 하나 밖에 가지지 못하지만, 조상 클래스는 여러 개 가질 수 있다. ... </summary> </entry> <entry><title>기강 자바-03</title><link href="https://idiot2222.github.io/posts/%EA%B8%B0%EA%B0%95_%EC%9E%90%EB%B0%94-03/" rel="alternate" type="text/html" title="기강 자바-03" /><published>2023-05-06T14:00:00+09:00</published> <updated>2023-05-06T14:00:00+09:00</updated> <id>https://idiot2222.github.io/posts/%EA%B8%B0%EA%B0%95_%EC%9E%90%EB%B0%94-03/</id> <content src="https://idiot2222.github.io/posts/%EA%B8%B0%EA%B0%95_%EC%9E%90%EB%B0%94-03/" /> <author> <name>idiot2222</name> </author> <category term="기본기 강화 스터디 - Java" /> <category term="기강_자바-03" /> <summary> 자바의 기본 문법 이번에는 자바의 기본적인 문법들에 대해 알아본다. static static은 정적 멤버 변수나 정적 메소드를 정의하는데 사용되는 키워드이다. static은 인스턴스가 아닌, 클래스 정보에 속해있다. 따라서 인스턴스를 생성하지 않아도 혹은 모든 인스턴스를 통해서 접근할 수 있다. 정적 멤버 변수는 클래스가 로드되는 시점에 메모리를 할당 받는다. 따라서 메모리 사용량이 증가할 수 있다. 왜요? 사용되는 시점에 올라왔다 소멸되는 것이 아닌, 클래스 로딩 시점부터 프로그램 종료 시점까지 메모리를 잡아먹으니까~ 정적 필드 정의하기 public class P... </summary> </entry> <entry><title>기강 자바-02</title><link href="https://idiot2222.github.io/posts/%EA%B8%B0%EA%B0%95_%EC%9E%90%EB%B0%94-02/" rel="alternate" type="text/html" title="기강 자바-02" /><published>2023-05-03T23:00:00+09:00</published> <updated>2024-01-14T18:11:37+09:00</updated> <id>https://idiot2222.github.io/posts/%EA%B8%B0%EA%B0%95_%EC%9E%90%EB%B0%94-02/</id> <content src="https://idiot2222.github.io/posts/%EA%B8%B0%EA%B0%95_%EC%9E%90%EB%B0%94-02/" /> <author> <name>idiot2222</name> </author> <category term="기본기 강화 스터디 - Java" /> <category term="기강_자바-02" /> <summary> 자바의 클래스 자바에서 클래스란, 자바 프로그램의 기본적인 구조를 이루는 요소이다. 동시에 필드와 메서드를 가지는 참조형 타입을 정의하기도 한다. 클래스의 기본 구성은 멤버 변수 메소드 생성자 함수이다. class Person { private String name; // 필드 변수들 private int age; public Person() { // 기본 생성자 } public Person(String name, int age) { // 모든 인자를 포함한 생... </summary> </entry> <entry><title>기강 자바-01</title><link href="https://idiot2222.github.io/posts/%EA%B8%B0%EA%B0%95_%EC%9E%90%EB%B0%94-01/" rel="alternate" type="text/html" title="기강 자바-01" /><published>2023-04-23T00:00:00+09:00</published> <updated>2023-05-05T15:55:54+09:00</updated> <id>https://idiot2222.github.io/posts/%EA%B8%B0%EA%B0%95_%EC%9E%90%EB%B0%94-01/</id> <content src="https://idiot2222.github.io/posts/%EA%B8%B0%EA%B0%95_%EC%9E%90%EB%B0%94-01/" /> <author> <name>idiot2222</name> </author> <category term="기본기 강화 스터디 - Java" /> <category term="기강_자바-01" /> <summary> 자바의 타입 자바에서 사용하는 변수의 타입은 크게 두 가지로 분류할 수 있다. 기본형 타입 (Primitive Type) 참조형 타입 (Reference Type) 기본형 타입 Primitive Type 원시형 또는 기본형 타입이라고 부른다. 자바에는 여덟 가지의 기본형 타입이 존재한다. 기본형은 한 번에 한 가지 타입을 나타낼 수 있다. 기본형 타입은 자바에 의해 정의된 타입이며, 사용자가 직접 정의하거나 재정의할 수 없다. 기본형 타입은 리터럴을 갖는 변수의 타입을 의미한다. 리터럴이란 변하지 않는 값, 그 자체를 의미한다. 기본형 타입의 변수를 사용하는 것은 그 ... </summary> </entry> <entry><title>어댑터 패턴</title><link href="https://idiot2222.github.io/posts/%EC%96%B4%EB%8C%91%ED%84%B0_%ED%8C%A8%ED%84%B4/" rel="alternate" type="text/html" title="어댑터 패턴" /><published>2023-03-27T20:00:00+09:00</published> <updated>2023-03-27T20:00:00+09:00</updated> <id>https://idiot2222.github.io/posts/%EC%96%B4%EB%8C%91%ED%84%B0_%ED%8C%A8%ED%84%B4/</id> <content src="https://idiot2222.github.io/posts/%EC%96%B4%EB%8C%91%ED%84%B0_%ED%8C%A8%ED%84%B4/" /> <author> <name>idiot2222</name> </author> <category term="코딩으로 학습하는 GoF의 디자인 패턴" /> <category term="어댑터_패턴" /> <summary> 어댑터 패턴이란 어댑터 패턴은 서로 호환성이 없는 두 객체를 호환되도록 할 때 사용하는 패턴이다. 기존의 클래스를 수정하지 않고, 사이의 어댑터 클래스를 만들어 사용할 수 있도록 해준다. 어댑터 패턴은 다음과 같이 나눠서 생각하면 편하다. Client 객체 Adaptee 객체를 사용하는 객체 Adaptee 객체 Client와 호환성이 없는 객체 Target 인터페이스 Adapter 객체를 정의하는 Client가 사용할 인터페이스 Adapter ... </summary> </entry> </feed>
